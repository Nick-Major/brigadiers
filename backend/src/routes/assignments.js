import express from 'express';
const router = express.Router();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏) - –¥–µ–ª–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–º
export let assignments = [];
export let assignedBrigadiers = []; // –ù–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤
let nextAssignmentId = 1;

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å brigadiers.js)
const allBrigadiers = [
    { id: 1, full_name: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", specialization: "—Å–∞–¥–æ–≤–Ω–∏–∫–∏" },
    { id: 2, full_name: "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á", specialization: "–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã" },
    { id: 3, full_name: "–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á", specialization: "—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –¥–µ—Ä–µ–≤—å–µ–≤" },
    { id: 4, full_name: "–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞", specialization: "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –æ–∑–µ–ª–µ–Ω–µ–Ω–∏—é" },
    { id: 5, full_name: "–ù–∏–∫–æ–ª–∞–µ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á", specialization: "—Å—Ç–∞—Ä—à–∏–µ —Å–∞–¥–æ–≤–Ω–∏–∫–∏" }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤
function updateAssignedBrigadiers() {
    assignedBrigadiers = [];
    
    assignments.forEach(assignment => {
        if (assignment.status === 'confirmed') {
            const brigadier = allBrigadiers.find(b => b.id === assignment.brigadier_id);
            if (brigadier) {
                // –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–∏–≥–∞–¥–∏—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –≤ –ø–µ—Ä–∏–æ–¥–µ
                const startDate = new Date(assignment.start_date);
                const endDate = new Date(assignment.end_date);
                
                for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
                    const dateString = date.toISOString().split('T')[0];
                    assignedBrigadiers.push({
                        date: dateString,
                        brigadier_id: assignment.brigadier_id,
                        full_name: brigadier.full_name,
                        specialization: brigadier.specialization,
                        assignment_id: assignment.id
                    });
                }
            }
        }
    });
    
    console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤:', assignedBrigadiers);
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ –Ω–∞ –¥–∞—Ç—É
export function getAssignedBrigadiersForDate(date) {
    return assignedBrigadiers.filter(item => item.date === date);
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
router.get('/', (req, res) => {
    const { startDate, endDate } = req.query;
    
    let filteredAssignments = assignments;
    
    if (startDate && endDate) {
        filteredAssignments = assignments.filter(assignment => {
            const assignmentStart = new Date(assignment.start_date);
            const assignmentEnd = new Date(assignment.end_date);
            const filterStart = new Date(startDate);
            const filterEnd = new Date(endDate);
            
            return assignmentStart <= filterEnd && assignmentEnd >= filterStart;
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∏–≥–∞–¥–∏—Ä–∞—Ö –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const assignmentsWithBrigadiers = filteredAssignments.map(assignment => ({
        ...assignment,
        brigadier: {
            id: assignment.brigadier_id,
            full_name: getBrigadierName(assignment.brigadier_id),
            specialization: getBrigadierSpecialization(assignment.brigadier_id)
        },
        initiator: {
            full_name: assignment.initiator_name || "–°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä"
        }
    }));
    
    res.json({
        success: true,
        data: assignmentsWithBrigadiers
    });
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
router.post('/', (req, res) => {
    const { brigadier_id, start_date, end_date, initiator_name = "–°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä" } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!brigadier_id || !start_date || !end_date) {
        return res.status(400).json({
            success: false,
            error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –±—Ä–∏–≥–∞–¥–∏—Ä –Ω–∞ —ç—Ç–∏ –¥–∞—Ç—ã
    const isBrigadierBusy = assignments.some(assignment => {
        if (assignment.brigadier_id === parseInt(brigadier_id) && assignment.status !== 'rejected') {
            const existingStart = new Date(assignment.start_date);
            const existingEnd = new Date(assignment.end_date);
            const newStart = new Date(start_date);
            const newEnd = new Date(end_date);
            
            return newStart <= existingEnd && newEnd >= existingStart;
        }
        return false;
    });
    
    if (isBrigadierBusy) {
        return res.status(400).json({
            success: false,
            error: '–ë—Ä–∏–≥–∞–¥–∏—Ä —É–∂–µ –∑–∞–Ω—è—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã'
        });
    }
    
    const newAssignment = {
        id: nextAssignmentId++,
        brigadier_id: parseInt(brigadier_id),
        start_date,
        end_date,
        status: 'requested', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å"
        initiator_name,
        created_at: new Date().toISOString(),
        work_days: generateWorkDays(start_date, end_date)
    };
    
    assignments.push(newAssignment);
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤
    updateAssignedBrigadiers();
    
    res.json({
        success: true,
        data: newAssignment
    });
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
router.patch('/:id/status', (req, res) => {
    const { id } = req.params;
    const { status } = req.body;
    
    const assignment = assignments.find(a => a.id === parseInt(id));
    
    if (!assignment) {
        return res.status(404).json({
            success: false,
            error: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        });
    }
    
    assignment.status = status;
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    updateAssignedBrigadiers();
    
    res.json({
        success: true,
        data: assignment
    });
});

// –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –¥–µ–º–æ)
router.post('/reset', (req, res) => {
    assignments = [];
    assignedBrigadiers = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤
    nextAssignmentId = 1;
    
    res.json({
        success: true,
        message: '–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã'
    });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
function generateWorkDays(startDate, endDate) {
    const workDays = [];
    const currentDate = new Date(startDate);
    const end = new Date(endDate);
    
    while (currentDate <= end) {
        workDays.push(currentDate.toISOString().split('T')[0]);
        currentDate.setDate(currentDate.getDate() + 1);
    }
    
    return workDays;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∏–≥–∞–¥–∏—Ä–∞—Ö
function getBrigadierName(brigadierId) {
    const brigadier = allBrigadiers.find(b => b.id === brigadierId);
    return brigadier ? brigadier.full_name : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∏–≥–∞–¥–∏—Ä";
}

function getBrigadierSpecialization(brigadierId) {
    const brigadier = allBrigadiers.find(b => b.id === brigadierId);
    return brigadier ? brigadier.specialization : "–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã";
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
updateAssignedBrigadiers();

export { router as assignmentsRouter };
