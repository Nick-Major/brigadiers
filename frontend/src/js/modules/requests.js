import { showNotification } from './notifications.js';
import { populateRequestBrigadierSelect } from './brigadiers.js';
import { getRequestFilterSettings } from './ui.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–æ–∫
export let requests = JSON.parse(localStorage.getItem('requests')) || [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞—è–≤–∫–∏
export function initializeRequestModal() {
    console.log('üîÑ initializeRequestModal called');
    
    const modal = document.getElementById('requestModal');
    const cancelBtn = document.getElementById('cancelRequestBtn');
    const createBtn = document.getElementById('createRequestBtn');

    console.log('üîç Modal element:', modal);
    console.log('üîç Cancel button:', cancelBtn);
    console.log('üîç Create button:', createBtn);

    if (modal && cancelBtn) {
        console.log('‚úÖ Adding event listeners for modal and cancel button');
        cancelBtn.addEventListener('click', () => {
            console.log('‚ùå Cancel button clicked');
            closeRequestModal();
        });
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                console.log('üéØ Modal background clicked');
                closeRequestModal();
            }
        });
    } else {
        console.error('‚ùå Modal or cancel button not found!');
    }

    if (createBtn) {
        console.log('‚úÖ Adding click listener to create button');
        createBtn.addEventListener('click', () => {
            console.log('üéØ Create request button clicked - opening modal');
            openRequestModal();
        });
    } else {
        console.error('‚ùå Create button not found!');
    }

    const form = document.getElementById('requestForm');
    console.log('üîç Request form:', form);
    
    if (form) {
        console.log('‚úÖ Adding submit listener to form');
        form.addEventListener('submit', (e) => {
            console.log('üì§ Form submit triggered');
            handleRequestSubmit(e);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
        const dateInput = form.querySelector('input[name="date"]');
        console.log('üîç Date input:', dateInput);
        
        if (dateInput) {
            console.log('‚úÖ Adding change listener to date input');
            dateInput.addEventListener('change', function() {
                console.log('üìÖ Date input changed to:', this.value);
                if (this.value) {
                    console.log('üîÑ Calling populateRequestBrigadierSelect with date:', this.value);
                    populateRequestBrigadierSelect(this.value);
                } else {
                    console.log('‚ö†Ô∏è Date input is empty');
                }
            });
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã
            console.log('üìÖ Initial date input value:', dateInput.value);
        } else {
            console.error('‚ùå Date input not found in request form!');
            // –ü–æ–∏—â–µ–º –≤—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const allInputs = form.querySelectorAll('input');
            console.log('üìã All inputs in form:');
            allInputs.forEach(input => console.log(' -', input.name, ':', input.value));
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ select –¥–ª—è –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤
        const brigadierSelect = form.querySelector('#requestBrigadierSelect');
        console.log('üîç Brigadier select:', brigadierSelect);
        if (!brigadierSelect) {
            console.error('‚ùå Brigadier select (#requestBrigadierSelect) not found in form!');
            // –ü–æ–∏—â–µ–º –≤—Å–µ select —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–µ
            const allSelects = form.querySelectorAll('select');
            console.log('üìã All selects in form:');
            allSelects.forEach(select => console.log(' -', select.id || select.name, ':', select.innerHTML));
        }
    } else {
        console.error('‚ùå Request form not found!');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è —Ç–∏–ø–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
    console.log('üîÑ Initializing worker type logic...');
    initializeWorkerTypeLogic();
    console.log('‚úÖ initializeRequestModal completed');
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞—è–≤–∫–∏
export function openRequestModal() {
    console.log('üîì openRequestModal called');
    
    const modal = document.getElementById('requestModal');
    if (modal) {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è+1 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        const defaultDate = tomorrow.toISOString().split('T')[0];
        
        console.log('üìÖ Default date for request:', defaultDate);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ñ–æ—Ä–º—É
        const dateInput = modal.querySelector('input[name="date"]');
        if (dateInput) {
            dateInput.value = defaultDate;
            console.log('‚úÖ Date input set to:', defaultDate);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤
        console.log('üîÑ Calling populateRequestBrigadierSelect...');
        populateRequestBrigadierSelect(defaultDate);
        
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        document.body.style.overflow = 'hidden';
        
        console.log('‚úÖ Request modal opened');
    } else {
        console.error('‚ùå Request modal element not found!');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞—è–≤–∫–∏
export function closeRequestModal() {
    const modal = document.getElementById('requestModal');
    if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = 'auto';
        
        const form = document.getElementById('requestForm');
        if (form) form.reset();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏
export function handleRequestSubmit(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const requestData = Object.fromEntries(formData.entries());
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–µ
    requestData.initiator = "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"; // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    addRequest(requestData);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeRequestModal();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞', 'success');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
export function addRequest(requestData) {
    const newRequest = {
        id: Date.now().toString(),
        status: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',
        ...requestData,
        createdAt: new Date().toISOString()
    };
    
    requests.push(newRequest);
    saveRequestsToStorage();
    loadRequestsData();
    
    return newRequest;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ localStorage
export function saveRequestsToStorage() {
    localStorage.setItem('requests', JSON.stringify(requests));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
export function loadRequestsData() {
    try {
        const tbody = document.getElementById('requestsTableBody');
        if (!tbody) return;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        requests = JSON.parse(localStorage.getItem('requests')) || [];

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        const filterSettings = getRequestFilterSettings();
        let filteredRequests = requests;

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
        if (filterSettings.filter === 'my') {
            filteredRequests = filteredRequests.filter(request => 
                request.initiator === "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            );
        }

        // –ü–æ–∏—Å–∫
        if (filterSettings.search) {
            const searchTerm = filterSettings.search.toLowerCase();
            filteredRequests = filteredRequests.filter(request =>
                request.address?.toLowerCase().includes(searchTerm) ||
                getBrigadierName(request.brigadier)?.toLowerCase().includes(searchTerm)
            );
        }

        if (filteredRequests.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="14" class="px-6 py-8 text-center text-gray-500">
                        ${requests.length === 0 ? 
                            '–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é.' : 
                            '–ó–∞—è–≤–∫–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'
                        }
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = filteredRequests.map(request => `
            <tr class="hover:bg-gray-50">
                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${request.date}</td>
                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${request.time}</td>
                <td class="px-4 py-3 text-sm text-gray-900">${request.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td class="px-4 py-3 text-sm text-gray-900">${getBrigadierName(request.brigadier)}</td>
                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${request.specialty || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</td>
                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${request.workersCount || 1}</td>
                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${request.workerType || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td class="px-4 py-3 text-sm text-gray-900">${request.workType || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${request.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</td>
                <td class="px-4 py-3 text-sm text-gray-900">${request.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</td>
                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${request.project || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${request.assignment || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${request.payerCompany || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</td>
                <td class="px-4 py-3 whitespace-nowrap">
                    <span class="status-badge status-published">${request.status}</span>
                </td>
            </tr>
        `).join('');
    } catch (error) {
        console.error('Error loading requests data:', error);
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –±—Ä–∏–≥–∞–¥–∏—Ä–∞ –ø–æ ID
function getBrigadierName(brigadierId) {
    const brigadiers = {
        '1': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
        '2': '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á', 
        '3': '–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
        '4': '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
        '5': '–ù–∏–∫–æ–ª–∞–µ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á'
    };
    return brigadiers[brigadierId] || '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ';
}

// –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
function initializeWorkerTypeLogic() {
    const specialtySelect = document.querySelector('select[name="specialty"]');
    const workerTypeSelect = document.getElementById('workerTypeSelect');
    
    if (specialtySelect && workerTypeSelect) {
        specialtySelect.addEventListener('change', function() {
            const specialty = this.value;
            workerTypeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>';
            
            // –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            workerTypeSelect.innerHTML += `
                <option value="–Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫">–ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫</option>
                <option value="–æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞">–û—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞</option>
            `;
        });
    }
    
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏-–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
    const projectSelect = document.querySelector('select[name="project"]');
    const assignmentSelect = document.querySelector('select[name="assignment"]');
    const payerCompany = document.getElementById('payerCompany');
    
    if (projectSelect && assignmentSelect && payerCompany) {
        const updatePayerCompany = () => {
            const project = projectSelect.value;
            const assignment = assignmentSelect.value;
            
            if (project && assignment) {
                if (assignment === '–ó–∞—Å—Ç—Ä–æ–π–∫–∞') {
                    payerCompany.value = '–¶–ï–•/–ë–°';
                } else if (assignment === '–£—Ö–æ–¥') {
                    payerCompany.value = '–£–°';
                } else if (assignment === '–†–∞—Å—Ç–µ–Ω–∏—è') {
                    payerCompany.value = '–¶–û';
                } else {
                    payerCompany.value = '–¶–§';
                }
            } else {
                payerCompany.value = '';
            }
        };
        
        projectSelect.addEventListener('change', updatePayerCompany);
        assignmentSelect.addEventListener('change', updatePayerCompany);
    }
}

// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –¥–µ–º–æ)
export function resetRequestsData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï –∑–∞—è–≤–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        requests = [];
        saveRequestsToStorage();
        loadRequestsData();
        showNotification('–í—Å–µ –∑–∞—è–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
        console.log('üóëÔ∏è –í—Å–µ –∑–∞—è–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
}
