import { brigadiersAPI, availabilityAPI } from './api.js';
import { showNotification } from './notifications.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤
export let availableBrigadiers = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤
export async function loadBrigadiers() {
    try {
        console.log('üîÑ Loading brigadiers...');
        const response = await brigadiersAPI.getBrigadiers();
        console.log('üì¶ Brigadiers API response:', response);
        
        availableBrigadiers = response.data.data || [];
        
        console.log('‚úÖ Processed brigadiers:', availableBrigadiers);
        populateBrigadierSelect();
    } catch (error) {
        console.error('‚ùå Error loading brigadiers:', error);
        availableBrigadiers = [
            { id: 1, full_name: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", specialization: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" },
            { id: 2, full_name: "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á", specialization: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" },
            { id: 3, full_name: "–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á", specialization: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" },
            { id: 4, full_name: "–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞", specialization: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ–∑–µ–ª–µ–Ω–µ–Ω–∏—é" }
        ];
        populateBrigadierSelect();
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤', 'error');
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
export function populateBrigadierSelect() {
    console.log('üéØ populateBrigadierSelect CALLED');
    
    const brigadierSelect = document.getElementById('id_brigadier');
    console.log('Brigadier select element:', brigadierSelect);
    console.log('Available brigadiers:', availableBrigadiers);
    
    if (!brigadierSelect) {
        console.error('‚ùå Brigadier select element not found!');
        return;
    }

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
    brigadierSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∏–≥–∞–¥–∏—Ä–∞</option>';
    console.log('Select cleared');
    
    if (Array.isArray(availableBrigadiers) && availableBrigadiers.length > 0) {
        console.log('‚úÖ Populating select with', availableBrigadiers.length, 'brigadiers');
        
        availableBrigadiers.forEach((brigadier, index) => {
            console.log(`Adding brigadier ${index + 1}:`, brigadier);
            const option = document.createElement('option');
            option.value = brigadier.id;
            option.textContent = `${brigadier.full_name} (${brigadier.specialization})`;
            brigadierSelect.appendChild(option);
        });
        
        console.log('‚úÖ Final select options count:', brigadierSelect.options.length);
    } else {
        console.error('‚ùå Available brigadiers is empty or not array:', availableBrigadiers);
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ –¥–ª—è –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É)
export async function populateRequestBrigadierSelect(selectedDate) {
    console.log('üéØ populateRequestBrigadierSelect CALLED with date:', selectedDate);
    
    const select = document.getElementById('requestBrigadierSelect');
    console.log('üîç Looking for select element...');
    
    if (!select) {
        console.error('‚ùå select element with id "requestBrigadierSelect" not found!');
        console.log('üìã Available elements with "request" in id:');
        // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å request –≤ id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const allElements = document.querySelectorAll('[id*="request"]');
        allElements.forEach(el => console.log(' -', el.id));
        return;
    }

    console.log('‚úÖ Select element found:', select);

    try {
        select.innerHTML = '<option value="">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤...</option>';
        console.log('üì° Making API call to /availability/available-brigadiers/' + selectedDate);
        
        const response = await availabilityAPI.getAvailableBrigadiers(selectedDate);
        console.log('‚úÖ API response received:', response);
        
        let availableBrigadiers = response.data.data || [];
        
        console.log('üë• Available brigadiers count:', availableBrigadiers.length);
        console.log('üë• Available brigadiers:', availableBrigadiers);
        
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∏–≥–∞–¥–∏—Ä–∞</option>';
        
        if (availableBrigadiers.length === 0) {
            select.innerHTML += '<option value="" disabled>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</option>';
            console.log('‚ö†Ô∏è No available brigadiers for date:', selectedDate);
            showNotification('–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ë—Ä–∏–≥–∞–¥–∏—Ä—ã".', 'warning');
        } else {
            availableBrigadiers.forEach(brigadier => {
                const option = document.createElement('option');
                option.value = brigadier.id;
                option.textContent = `${brigadier.full_name} (${brigadier.specialization})`;
                select.appendChild(option);
            });
            console.log('‚úÖ Select populated with', availableBrigadiers.length, 'brigadiers');
        }
    } catch (error) {
        console.error('‚ùå Error loading available brigadiers:', error);
        console.error('‚ùå Error details:', error.response?.data || error.message);
        select.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤</option>';
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤', 'error');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–∏–≥–∞–¥–∏—Ä–∞ –ø–æ ID
export function getBrigadierById(brigadierId) {
    return availableBrigadiers.find(b => b.id === brigadierId);
}